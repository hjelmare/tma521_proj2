reset;

option solver cplexamp;
model MTC6_v2_proj_course.mod;

data 2010-11-17_15j_MTC6.dat;

#data ../Alla_datfiler/2010-08-16_30j.dat;
#data ../Alla_datfiler/2010-08-16_40j.dat;
#----------------------define parameters-------------------------------------------------------------------
#param x{1..maxjobs,1..5, 1..M};
param timeStep{1..5};
param x_col;
param red_cost{K_mach_RESOURCES};
param exitCriteria;
param iIteration;
param LBD;
param UBD;
param final_x {JOBS, K_mach_RESOURCES, T_ALL_INTERVALS};

#----------------------end define parameters --------------------------------------------------------------
#----------------------Define Problems---------------------------------------------------------------------
problem restrictedMasterDual:  pi, gamma, restricted_master_dual, constraint1;
# needs A and B also.... maybe....

problem relaxedRestrictedMaster: tau, relaxed_restricted_master, constraint2, constraint3; 

problem columnGenerationSubproblem: column_generation_subproblem, start_constraints2_disc, flexconstraints_disc, not_same_time_constr_disc, x;


problem final_relaxedRestrictedMaster: final_tau, final_relaxed_restricted_master, final_constraint2, final_constraint3;
#----------------------------------------------------------------------------------------------------------

let A:=10;
let B:=0.1;
let lMax := 1;
let exitCriteria := -10000;

for {j in 1..maxjobs}{  #initierar x till 0 Ã¶ver alla index
  for{k in K_mach_RESOURCES}{
    for{u in 1..M}{
      let x_nail[j,k,u,1] := 0;
    }
  }
}

let timeStep[1] := a_disc['MC1'];
let timeStep[2] := a_disc['MC2'];
let timeStep[3] := a_disc['MC3'];
let timeStep[4] := a_disc['MC4'];
let timeStep[5] := a_disc['MC5'];
for{j in JOBS}{
  let p := 5;
  repeat while lambda_mach[j,member(p,K_mach_RESOURCES)] = 0 {
    let p := p -1;
  };
  let x_nail[j,member(p,K_mach_RESOURCES),timeStep[p]+1,1] := 1;
  let timeStep[p] := timeStep[p] + proc_time_disc[j];
}


display sum{j in JOBS, u in T_ALL_INTERVALS}(x_nail[j,'MC1',u,1]);
display sum{j in JOBS, u in T_ALL_INTERVALS}(x_nail[j,'MC2',u,1]);
display sum{j in JOBS, u in T_ALL_INTERVALS}(x_nail[j,'MC3',u,1]);
display sum{j in JOBS, u in T_ALL_INTERVALS}(x_nail[j,'MC4',u,1]);
display sum{j in JOBS, u in T_ALL_INTERVALS}(x_nail[j,'MC5',u,1]);
# end of initialization


let iIteration := 1;
repeat while exitCriteria < -1e-10{
#for{iteration in 1..1}{

  solve restrictedMasterDual;

#  display pi, gamma;
#  print {j in JOBS} pi[j] >> outPi.txt;
#  print {k in K_mach_RESOURCES} gamma[k] >> outGamma.txt;

  let lMax := lMax + 1;
  #---------------------------------------------------------------------------
  #solve columnGenerationSubproblem;
  #let {j in JOBS, k in K_mach_RESOURCES, u in T_ALL_INTERVALS} x_nail[j,k,u,lMax] := x[j,k,u];

  let p := 1;
  for {k in K_mach_RESOURCES}{
    solve columnGenerationSubproblem;
    let { j in JOBS, u in T_ALL_INTERVALS} x_nail[j,k,u,lMax] := x[j,u];
    let p := p + 1;
  }
  let p := 1;
#--------------------------------------------------------------------
  
# Calculates the reduced cost for each machine
 for {k in K_mach_RESOURCES}{ 
    let red_cost[k] := sum{j in JOBS, u in T_ALL_INTERVALS}( (A*(u + proc_time_disc[j]) + B*max(u + proc_time_disc[j] - d_disc[j], 0 ) - pi[j])*x_nail[j,k,u,lMax]  ) - gamma[k];
 }
 let exitCriteria := min(red_cost['MC1'], red_cost['MC2'], red_cost['MC3'], red_cost['MC4'], red_cost['MC5']);

  let UBD := sum{i in JOBS}(pi[i]) + sum{k in K_mach_RESOURCES}(gamma[k]);
  let LBD := UBD + exitCriteria;

  let iIteration := iIteration +1;
  display '                                                          ';
  display iIteration;
  display exitCriteria;
  display UBD;
  display LBD;
  display '                                                          ';
  print iIteration, _total_solve_time, exitCriteria, UBD, LBD > iterationResult_40jobs.txt;
}


solve relaxedRestrictedMaster;

solve final_relaxedRestrictedMaster;
display tau;
display final_tau;

for {m in 1..lMax}{
  for {k in K_mach_RESOURCES}{
    if final_tau[k,m] == 1 then {
      for {j in JOBS, u in T_ALL_INTERVALS}{
        let final_x[j,k,u] := x_nail[j,k,u,m];
      }
    }
  }
}

for {j in JOBS, k in 1..5, u in T_ALL_INTERVALS}{
  if final_x[j,member(k,K_mach_RESOURCES),u] == 1 then {
    printf "%3i%3i%3i\n" , j , k , u > final_x_40jobs.txt; 
  }
}
#display {j in JOBS, k in K_mach_RESOURCES, u in 1..15, m in 1..lMax} x_nail[j,k,u,m];
#display final_x;

display '||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||';

#display sum{j in JOBS, u in T_ALL_INTERVALS}(x_nail[j,'MC1',u,lMax]);
#display sum{j in JOBS, u in T_ALL_INTERVALS}(x_nail[j,'MC2',u,lMax]);
#display sum{j in JOBS, u in T_ALL_INTERVALS}(x_nail[j,'MC3',u,lMax]);
#display sum{j in JOBS, u in T_ALL_INTERVALS}(x_nail[j,'MC4',u,lMax]);
#display sum{j in JOBS, u in T_ALL_INTERVALS}(x_nail[j,'MC5',u,lMax]);

