reset;


option solver cplexamp;
model MTC6_v2_proj_course.mod;  									# load the optimization model

data 2010-11-17_15j.dat;   							# load the model data

problem MTC4_disc:  x_nail, s_disc, h_disc, Finish_times_and_tardiness_disc, opconstraints_disc,
					flexconstraints_disc, not_same_time_constr_disc,
					interop_time_constraints_disc, end_for_j_prec_constraints,
					start_constraints1_disc,
					start_constraints2_disc, completion_time_constraints_disc, 
					tardiness_constraints_disc, end_constraints_disc;

option cplex_options
	'clocktype=2'	#type 1 is CPU-seconds, type 2 is wall-clock seconds
	'mipdisplay=2'
	'timing=1'
	'mipinterval=2000'
#	'nodefile=2'
#	'workfilelim=2200'	#128 Mbyte RAM is default, compute.math.chalmers.se has 48Gb
#	'absmipgap=0.0'
	'timelimit=7200'	#stops after 7200 CPU-seconds
#	Jag la till mipgap = 0.0000005 2010-03-24 eftersom körningarna tagit för lång tid och jag inte lyckats få fram resultat.
	'mipgap=0.0000005'
	;

problem MTC3_mach: t_mach, z_mach, y_mach, s_mach, h_mach, Finish_times_and_tardiness_mach, opconstraints_mach,
					flexconstraints_mach, both_y_not_1_constraints_mach, at_least_one_y_constraints_mach,
					earliest_start_constraints_mach, start_constraints1_mach,
					start_constraints2_mach, completion_time_constraints_mach, interop_time_constraints_mach,
					tardiness_constraints_mach, y_fixed_constraints_mach, z_fixed_constraints_mach;
					
	option cplex_options
	'clocktype=1'	#type 1 is CPU-seconds, type 2 is wall-clock seconds
	'mipdisplay=2'
	'timing=1'
	'mipinterval=2000'
#	'nodefile=2'
#	'workfilelim=2200'	#128 Mbyte RAM is default, compute.math.chalmers.se has 48Gb
#	'absmipgap=0.0'
#	'timelimit=1000'	#stops after 1000 CPU-seconds
#	Jag la till mipgap = 0.0000005 2010-03-24 eftersom körningarna tagit för lång tid och jag inte lyckats få fram resultat.
	'mipgap=0.0000005'
	;

problem MTC4_feas: t, z, y, s, h, Process_times_and_tardiness_feas, opconstraints_feas,
					flexconstraints, both_y_not_1_constraints, at_least_one_y_constraints,
					earliest_start_constraints, same_job_constraints, interop_time_constraints,
					start_constraints1, start_constraints2, completion_time_constraints, 
					tardiness_constraints, z2_fixed_constraints_feas,
					y_fixed_constraints_feas;
					
option cplex_options
	'clocktype=1'	#type 1 is CPU-seconds, type 2 is wall-clock seconds
	'mipdisplay=2'
	'timing=1'
	'mipinterval=2000'
#	'nodefile=2'
#	'workfilelim=2200'	#128 Mbyte RAM is default, compute.math.chalmers.se has 48Gb
#	'absmipgap=0.0'
#	'timelimit=1000'	#stops after 1000 CPU-seconds
#	Jag la till mipgap = 0.0000005 2010-03-24 eftersom körningarna tagit för lång tid och jag inte lyckats få fram resultat.
	'mipgap=0.0000005'
	;

option presolve_eps 1.0e-10;

#-------------------------------------- reset all release date for all jobs q which belong to (j,q) in the set Q ----------------------------------#
param end_of_chain {JOBS};
param chain_order {JOBS};

for {j in 1..maxjobs} let end_of_chain[j] := 0;
for {j in 1..maxjobs} let chain_order[j] := 0;

for {j_prec1 in Q_PREC} {
	if (end_of_chain[j_prec1] == 0) then {
		let r_disc[q_follow[j_prec1]] := r_disc[j_prec1] + v_disc_jq_ext[j_prec1];
		let chain_order[j_prec1] := 1;
		let chain_order[q_follow[j_prec1]] := 2;
		let end_of_chain[q_follow[j_prec1]] := 1;
	}
	else if (end_of_chain[j_prec1] == 1) then {
		let r_disc[q_follow[j_prec1]] := r_disc[j_prec1] + v_disc_jq_ext[j_prec1];
		let chain_order[q_follow[j_prec1]] := chain_order[j_prec1] + 1;
		let end_of_chain[j_prec1] := 0;
		let end_of_chain[q_follow[j_prec1]] := 1;
	}
}
for {counter in 1..4} {
	for {j in 1..maxjobs} {
		if (end_of_chain[j] == 1) then {
			for {j_prec2 in Q_PREC} {
				if (j_prec2 == j) then {
					let r_disc[q_follow[j_prec2]] := r_disc[j_prec2] + r_disc[q_follow[j_prec2]];
					let chain_order[q_follow[j_prec2]] := chain_order[j_prec2] + 1;
					let end_of_chain[j_prec2] := 0;
					let end_of_chain[q_follow[j_prec2]] := 1;
				}
			}
		}
	}
}

display r_disc;
display chain_order;
display end_of_chain;

#-------------------------------------- HEURISTIC to determine better end of planning horizon, T----------------------------------#


# These parameters are used for the heuristic: param x_nail_heur[j,k,u], s_time [k], s_max, s_min, chosen_k, proc_time_max, start_time[j]
# parameters for the heuristic to find a good feasible solution, and a T_HORIZON

param s_time {K_mach_RESOURCES};
param s_max;
param s_min;
param s_min2;
param chosen_k symbolic;
param chosen_k2 symbolic;
param proc_time_max;
param start_time {JOBS};
param t_disc_solution{JOBS};	# the starting times of the dicrete solution to the machining problem in hours
param waiting_list{Q_PREC};
param r_heur {JOBS};			# release dates for the heuristic
param x_nail_heur {JOBS,K_mach_RESOURCES,T_ALL_INTERVALS};	# The solution found by the heuristic

# OBS: All jobs should be ordered according to increasing release dates, so job nr 1 has the lowest release date.
# Initial values
for {j in JOBS, k in K_mach_RESOURCES, u in 0..T_HORIZON} let x_nail_heur[j,k,u] := 0;
# The time when resource k is available for the first time:
for {k in K_mach_RESOURCES} let s_time[k] := a_disc[k];
let proc_time_max := 0;
# The release date for the heuristics are intitially set to the real release dates.
for {j in JOBS} {
let r_heur[j] := r_disc[j];
let start_time[j] := T_HORIZON;			#The start_time of all jobs are given T-HORIZON as initial values
}
# Initial values for the waiting_list
for {j_prec in Q_PREC} let waiting_list[j_prec] := 0;

for {j in 1..maxjobs} {
	let s_min := T_HORIZON;
# 	Below a resource k is chosen in order to schedule job j. 
	for {k in K_mach_RESOURCES}  {
		if ( lambda_mach[j,k]==1  ) then { 
			if (s_min > s_time[k]) then {
				let s_min := s_time[k];
				let chosen_k := k;
				if (r_heur[j] > s_min) then {
					let s_min := r_heur[j];
 						# s_min cannot be better than r_heur for this job so let's exit the loop
					break;
				}	
			}
		}		
	}
	let x_nail_heur[j,chosen_k,s_min] := 1;
	let start_time[j] := s_min;
	let s_time[chosen_k] := s_min + proc_time_disc[j];
	display x_nail_heur[j,chosen_k,s_min],j,chosen_k,s_min;	
	if (proc_time_max < proc_time_disc[j]) then let proc_time_max := proc_time_disc[j];
	# Check if job j is the second job in a (j_prec,q_follow)-pair, where this pair belongs to the set Q_PREC,  
	# and time v_jq is required to pass between job j and job q. If this is the case, and v_jq has not passed 
	# since termination of job j_prec, job q is put in the waiting_list, to be scheduled later
	for {j_prec in Q_PREC} {
		if (j <> maxjobs and j == q_follow[j_prec]) then {
			if (waiting_list[j_prec] == 0 and (start_time[j_prec] + v_disc_jq_ext[j_prec]) > start_time[q_follow[j_prec]]) then {
				# Job j is "descheduled and a new release date is set
				let x_nail_heur[j,chosen_k,s_min] := 0;
				let s_time[chosen_k] := s_min;
				let r_heur[j] := start_time[j_prec] + v_disc_jq_ext[j_prec];
				let start_time[j] := T_HORIZON;
				let waiting_list[j_prec] := 1;
				print "Heuristic information: heuristic release date of q updated, because of the time v_jq_ext has to elapse after t_j, when (j,q) belongs to set Q";
				print "Job descheduled";
				display q_follow[j_prec], r_heur[j];
				# If their are any succeeding job for the same part, we have to reset their release dates too
				# max pairs of nested (j,q):s are 5 pairs (5 nested loops=
				for {j_prec1 in Q_PREC} {
					if (j_prec1 == q_follow[j_prec]) then {
						let r_heur[q_follow[j_prec1]] := start_time[j_prec] + v_disc_jq_ext[j_prec] + v_disc_jq_ext[j_prec1];
						let waiting_list[j_prec1] := 1;
						print "Heuristic information: heuristic release date of q1 updated, for the succeeding pair";
						display q_follow[j_prec1], r_heur[q_follow[j_prec1]];
						for {j_prec2 in Q_PREC} {
							if (j_prec2 == q_follow[j_prec1]) then {
								let r_heur[q_follow[j_prec2]] := start_time[j_prec] + v_disc_jq_ext[j_prec] + v_disc_jq_ext[j_prec1] + v_disc_jq_ext[j_prec2];
								let waiting_list[j_prec2] := 1;
								print "Heuristic information: heuristic release date of q2 updated, for the succeeding pair";
								for {j_prec3 in Q_PREC} {
									if (j_prec3 == q_follow[j_prec2]) then {
										let r_heur[q_follow[j_prec3]] := start_time[j_prec] + v_disc_jq_ext[j_prec] + v_disc_jq_ext[j_prec1] + v_disc_jq_ext[j_prec2] + v_disc_jq_ext[j_prec3];
										let waiting_list[j_prec3] := 1;
										print "Heuristic information: heuristic release date of q3 updated, for the succeeding pair";
										for {j_prec4 in Q_PREC} {
											if (j_prec4 == q_follow[j_prec3]) then {
												let r_heur[q_follow[j_prec4]] := start_time[j_prec] + v_disc_jq_ext[j_prec] + v_disc_jq_ext[j_prec1] + v_disc_jq_ext[j_prec2] + v_disc_jq_ext[j_prec3] + v_disc_jq_ext[j_prec4];				
												let waiting_list[j_prec4] := 1;
												print "Heuristic information: heuristic release date of q4 updated, for the succeeding pair";
											}
										}
									}
								}
							}
						}
					}	
				}
			}
			else if (waiting_list[j_prec] == 1) then {
			    if (start_time[j_prec] + v_disc_jq_ext[j_prec] > start_time[q_follow[j_prec]]) then {
					# j = q_follow[j_prec] is in the waiting list and probably is not j_prec scheduled yet, so start_time[j_prec] = T_HORIZON.
					# Hence we don't want to reset the release dates. But we do want to "deschedule" j and keep it in the waiting list:
					let x_nail_heur[j,chosen_k,s_min] := 0;
					let s_time[chosen_k] := s_min;
					let start_time[j] := T_HORIZON;
					print "Heuristic information: The j_prec in the pair (j_prec,j) in Q has probably not been scheduled yet since the v_jq-constraint is not fulfilled.";
					print "Job descheduled and put in the waiting list";
					display q_follow[j_prec];
				}
				else {
					# j = q_follow[j_prec] and has been scheduled OK, so we remove j_prec from the waiting_list
					let waiting_list[j_prec] := 0;
				}
			}
		}
		else if (waiting_list[j_prec] == 1) then {
			let s_min := T_HORIZON;
			# Below a resource k is chosen in order to schedule the job q_follow[j_prec] which is not yet scheduled.
			for {k in K_mach_RESOURCES}  {
				if ( lambda_mach[q_follow[j_prec],k]==1  ) then { 
					if (s_min > s_time[k]) then {
						let s_min := s_time[k];
						let chosen_k := k;				
					}
				}		
			}
			if (r_heur[q_follow[j_prec]] <= s_min) then {
				let x_nail_heur[q_follow[j_prec],chosen_k,s_min] := 1;
				let start_time[q_follow[j_prec]] := s_min;
				let s_time[chosen_k] := s_min + proc_time_disc[q_follow[j_prec]];
				print "A job in the waiting list is scheduled after its release date";
				display x_nail_heur[q_follow[j_prec],chosen_k,s_min],q_follow[j_prec],chosen_k,s_min;	
				let waiting_list[j_prec] := 0;
			}
		}
		else if (j == maxjobs) then {
			let s_min := r_heur[q_follow[j_prec]];
			let x_nail_heur[q_follow[j_prec],chosen_k,s_min] := 1;
			let start_time[q_follow[j_prec]] := s_min;
			let s_time[chosen_k] := s_min + proc_time_disc[q_follow[j_prec]];
			print "The loop is finished and the rest of the jobs are scheduled";
			display x_nail_heur[q_follow[j_prec],chosen_k,s_min],q_follow[j_prec],chosen_k,s_min;	
			let waiting_list[j_prec] := 0;
		}
	}
}


let s_max :=0;
for {k in K_mach_RESOURCES} if (s_max < s_time[k]) then let s_max := s_time[k];

# 2*proc_time_max is added to the max completion time of the jobs in the heuristic, so that 
# there is room for at least 3 jobs to change scheduled resources in the optimization
let T_HORIZON := s_max + 2*proc_time_max;

#------------------------------------------------- END OF HEURISTIC -------------------------------------------------#


option omit_zero_rows 0;

print "";
print "----------Modell MTC6 v1 - Discrete machining problem with nail variables--------------";
print "";
print "Length of discrete time interval: ", T_length_interval;
print "";
print "Length of planning horizon (in number of discrete time intervals): ", T_HORIZON;
print "";
print "Number of jobs: ", maxjobs;
print "";
display a;
display proc_time;

# option omit_zero_rows 1;
# display x_nail_heur;

#---------------------------------------------------------------------------------------------------------------------------------#

solve MTC4_disc;

print "---------- Solution of the time-indexed model with discrete nail variables -----------";

#print "----------y_disc_solution, which job is preceded by which job in a certain resource ----------";

# set all y to 0 at first
let {j in JOBS,q in JOBS,k in K_RESOURCES} y_disc_solution[j,q,k] := 0;	#so y_disc_solution is 0 for the non-machining resources
for {j in JOBS,q in JOBS,k in K_mach_RESOURCES} if (0 < sum{u in T_ALL_INTERVALS} u*x_nail[j,k,u] < sum{u in T_ALL_INTERVALS} u*x_nail[q,k,u]) then let y_disc_solution[j,q,k] := 1;	#y_disc_solution should be 1 when job j precedes job q in the same resource

option omit_zero_rows 0, display_transpose -10;
#display y_disc_solution;

print "----------z_disc_solution, which job is scheduled to which resource -----------------";

let {j in JOBS, k in K_RESOURCES} z_disc_solution[j,k] := 0;	#so z_disc_solution has a value for the non-machining resources
let {j in JOBS, k in K_mach_RESOURCES} z_disc_solution[j,k] := sum{u in T_ALL_INTERVALS} x_nail[j,k,u];

option omit_zero_rows 0, display_transpose -10;
display z_disc_solution;

let {j in JOBS} t_disc_solution[j] := T_length_interval*(sum{k in K_mach_RESOURCES, u in T_ALL_INTERVALS} u*x_nail[j,k,u]);

option omit_zero_rows 0, display_transpose 10;
print "----------Starting time t_disc_j (hours from time t0)----------------------------------------";
display t_disc_solution; 
print "----------Completion time s_disc_j (# of intervals)------------------------------------------";
display s_disc; 
print "----------Tardiness h_disc_j (# of intervals)------------------------------------------------";
display h_disc; 

solve MTC3_mach;
print "";
print "---------- Postprocessing of discrete output data - get non-discrete starting and completion times ------------------";

option omit_zero_rows 0, display_transpose 10;
print "----------Starting time t_mach_j (hours from time t0)----------------------------------------";
display t_mach; 
print "----------Completion time s_mach_j (# of intervals)------------------------------------------";
display s_mach; 
print "----------Tardiness h_mach_j (# of intervals)------------------------------------------------";
display h_mach; 



solve MTC4_feas;

print "";
print "--------------------- Solution to the feasibility problem---------------------------";
print "----------z_ijk (which operation (i,j) is scheduled to which resource k)-------";

option omit_zero_rows 0, display_transpose -10;
display z;
 
#print "----------y_ijpqk =1 when op (i,j) precedes op (p,q) on resource k-------------";
#display y; 
option omit_zero_rows 0, display_transpose 10;
print "----------Starting time t_ij (If (tr) jobs j in rows,(hours)-------------------";
display t; 
print "----------Completion time s_j (hours)------------------------------------------";
display s; 

print "----------Tardiness h_j (hours)------------------------------------------------";
display h;

let proc_tardi_objective := sum{j in JOBS} (s[j]-t[1,j]+h[j]);

print "---Sum of processing times and tardiness for the solution of the feasibility problem---";
display proc_tardi_objective;

  



